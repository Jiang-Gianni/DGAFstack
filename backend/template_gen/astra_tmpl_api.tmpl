// GENERATED CODE - DO NOT MODIFY BY HAND

package astra

import (
	"fmt"

	{{range .Packages}}
	"{{.}}"{{end}}
	"github.com/google/uuid"
	"github.com/stargate/stargate-grpc-go-client/stargate/pkg/client"
	pb "github.com/stargate/stargate-grpc-go-client/stargate/pkg/proto"
)

{{range $struct := .Structs}}
{{$lenList := len .SnakeFieldList}}
//{{.Name}} REST API
var (
	{{.Name}}ColumnToField = []func(*pb.Value, {{.Pointer}}) {{.Pointer}}{
		{{range .Fields}}
		func(val *pb.Value, p {{ $struct.Pointer}}) {{ $struct.Pointer}} {
			{{.FieldName}}, _ := {{.FirstFunction}}
			p.{{.FieldName}} = {{.SecondFunction}}
			return p
		},
		{{end}}
	}
	{{.Name}}QueryResponse = func(response *pb.Response) ([]{{.PackageStruct}}, error) {
		rows := response.GetResultSet().Rows
		result := make([]{{.PackageStruct}}, len(rows))
		for rowIndex, row := range rows {
			rowResult := &{{.PackageStruct}}{}
			for valueIndex, value := range row.Values {
				rowResult = {{.Name}}ColumnToField[valueIndex](value, rowResult)
			}
			result[rowIndex] = *rowResult
		}
		return result, nil
	}
)

type {{.Name}} struct {
	Keyspace       string
	StargateClient *client.StargateClient
}

func (astraDb *AstraDB) {{.Name}}() *{{.Name}} {
	return &{{.Name}}{
		Keyspace: astraDb.Keyspace,
		StargateClient: astraDb.StargateClient,
	}
}

func (t *{{.Name}}) Get() ([]{{.PackageStruct}}, error) {
	pbQuery := &pb.Query{Cql: fmt.Sprintf("select {{.IdFieldSnake}}, {{.SnakeFieldJoined}} from %s.{{.TableName}};", t.Keyspace)}
	response, err := t.StargateClient.ExecuteQuery(pbQuery)
	if err != nil {
		fmt.Printf("error executing query %v", err)
		return nil, err
	}
	return {{.Name}}QueryResponse(response)
}

func (t *{{.Name}}) GetById(id string) ([]{{.PackageStruct}}, error) {
	pbQuery := &pb.Query{
		Cql: fmt.Sprintf("select {{.IdFieldSnake}}, {{.SnakeFieldJoined}} from %s.{{.TableName}} where {{.IdFieldSnake}} = %s;", t.Keyspace, id),
	}
	response, err := t.StargateClient.ExecuteQuery(pbQuery)
	if err != nil {
		fmt.Printf("error executing query %v", err)
		return nil, err
	}
	return {{.Name}}QueryResponse(response)
}

func (t *{{.Name}}) Create(toBeCreated{{.Name}}s []{{.PackageStruct}}) ([]string, error) {
	newUuids := []string{}
	var queries []*pb.BatchQuery
	for _, row := range toBeCreated{{.Name}}s {
		rowUuid := uuid.New().String()
		row.{{.IdField}} = rowUuid
		newUuids = append(newUuids, rowUuid)
		rowBatchQuery := pb.BatchQuery{
			Cql: fmt.Sprintf("insert into %s.{{.TableName}}({{.IdFieldSnake}}, {{.SnakeFieldJoined}}) values (%s ,{{.PercJoined}});", t.Keyspace, row.{{.IdField}}, {{.FieldList}}),
		}
		queries = append(queries, &rowBatchQuery)
	}
	pbBatch := &pb.Batch{
		Type:    pb.Batch_LOGGED,
		Queries: queries,
	}
	_, err := t.StargateClient.ExecuteBatch(pbBatch)
	if err != nil {
		fmt.Printf("error executing query %v", err)
		return nil, err
	}
	return newUuids, nil
}

func (t *{{.Name}}) Update(toBeUpdated{{.Name}}s []{{.PackageStruct}}) error {
	var queries []*pb.BatchQuery
	for _, row := range toBeUpdated{{.Name}}s {
		rowBatchQuery := pb.BatchQuery{
			Cql: fmt.Sprintf("update %s.{{.TableName}} set {{range $i, $field := .SnakeFieldList}}{{$field}} = {{index $struct.PercList $i}}{{if (isNotLast $i $lenList)}}, {{end}}{{end}} where {{.IdFieldSnake}} = %s;", t.Keyspace, {{.FieldList}}, row.{{.IdField}}),
		}
		_ = row
		queries = append(queries, &rowBatchQuery)
	}
	pbBatch := &pb.Batch{
		Type:    pb.Batch_LOGGED,
		Queries: queries,
	}
	_, err := t.StargateClient.ExecuteBatch(pbBatch)
	if err != nil {
		fmt.Printf("error executing query %v", err)
		return err
	}
	return nil
}

func (t *{{.Name}}) Delete(id string) (error) {
	pbQuery := &pb.Query{
		Cql: fmt.Sprintf("delete from %s.{{.TableName}} where {{.IdFieldSnake}} = %s;", t.Keyspace, id),
	}
	_, err := t.StargateClient.ExecuteQuery(pbQuery)
	if err != nil {
		fmt.Printf("error executing query %v", err)
		return err
	}
	return nil
}

{{end}}